name: "authentik"
url: "https://docs.goauthentik.io/docs/install-config/install/docker-compose"
applicationUrl: "{{HttpEndpoint:frontend:Url}}if/flow/initial-setup/"
shortDescription: "Account management system"
fullDescription: "Provides users/employees with one login for all internal applications and services, simplifying access and improving security."
tags: [ "network", "security" ]
contracts:
  - type: "Container"
    name: "server"
    imageName: "ghcr.io/goauthentik/server:latest"
    command: [ "server" ]
    env:
      AUTHENTIK_REDIS__HOST: "{{Redis::Host}}"
      AUTHENTIK_POSTGRESQL__HOST: "{{Postgresql::Host}}"
      AUTHENTIK_POSTGRESQL__NAME: "{{Postgresql::Database}}"
      AUTHENTIK_POSTGRESQL__USER: "{{Postgresql::User}}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "{{Postgresql::Password}}"
      AUTHENTIK_SECRET_KEY: "{{Password:SecretKey:Value}}"
  - type: "Container"
    name: "worker"
    imageName: "ghcr.io/goauthentik/server:latest"
    command: [ "worker" ]
    env:
      AUTHENTIK_REDIS__HOST: "{{Redis::Host}}"
      AUTHENTIK_POSTGRESQL__HOST: "{{Postgresql::Host}}"
      AUTHENTIK_POSTGRESQL__NAME: "{{Postgresql::Database}}"
      AUTHENTIK_POSTGRESQL__USER: "{{Postgresql::User}}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "{{Postgresql::Password}}"
      AUTHENTIK_SECRET_KEY: "{{Password:SecretKey:Value}}"
    requireDocker: true
  - type: "HttpEndpoint"
    name: "frontend"
    containerName: "server"
    port: 9000
  - type: "Mount"
    volumeName: "media"
    containerName: "server"
    path: "/media"
  - type: "Mount"
    volumeName: "media"
    containerName: "worker"
    path: "/media"
  - type: "Mount"
    volumeName: "certs"
    containerName: "worker"
    path: "/certs"