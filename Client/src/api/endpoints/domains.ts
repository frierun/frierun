/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Frierun.Server
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { DomainInstaller } from "../schemas";

import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getDomainsResponse200 = {
  data: DomainInstaller[];
  status: 200;
};

export type getDomainsResponseComposite = getDomainsResponse200;

export type getDomainsResponse = getDomainsResponseComposite & {
  headers: Headers;
};

export const getGetDomainsUrl = () => {
  return `/api/v1/domains`;
};

export const getDomains = async (
  options?: RequestInit,
): Promise<getDomainsResponse> => {
  return customFetch<getDomainsResponse>(getGetDomainsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetDomainsQueryKey = () => {
  return [`/api/v1/domains`] as const;
};

export const getGetDomainsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDomains>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDomains>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDomainsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDomains>>> = ({
    signal,
  }) => getDomains({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDomains>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDomainsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDomains>>
>;
export type GetDomainsQueryError = unknown;

export function useGetDomains<
  TData = Awaited<ReturnType<typeof getDomains>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDomains>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getDomains>>,
        TError,
        Awaited<ReturnType<typeof getDomains>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDomains<
  TData = Awaited<ReturnType<typeof getDomains>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDomains>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getDomains>>,
        TError,
        Awaited<ReturnType<typeof getDomains>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDomains<
  TData = Awaited<ReturnType<typeof getDomains>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDomains>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetDomains<
  TData = Awaited<ReturnType<typeof getDomains>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDomains>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDomainsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
