/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Frierun.Server
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { DockerVolume } from "../schemas";
import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export type getVolumesResponse = {
  data: DockerVolume[];
  status: number;
};

export const getGetVolumesUrl = () => {
  return `/api/v1/volumes`;
};

export const getVolumes = async (
  options?: RequestInit,
): Promise<getVolumesResponse> => {
  return customFetch<Promise<getVolumesResponse>>(getGetVolumesUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetVolumesQueryKey = () => {
  return [`/api/v1/volumes`] as const;
};

export const getGetVolumesQueryOptions = <
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVolumesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVolumes>>> = ({
    signal,
  }) => getVolumes({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVolumes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetVolumesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVolumes>>
>;
export type GetVolumesQueryError = unknown;

export function useGetVolumes<
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getVolumes>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetVolumes<
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getVolumes>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetVolumes<
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetVolumes<
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetVolumesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
