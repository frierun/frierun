/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Frierun.Server
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { Contract, Package } from "../schemas";
import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export type getPackagesResponse = {
  data: Package[];
  status: number;
};

export const getGetPackagesUrl = () => {
  return `/api/v1/packages`;
};

export const getPackages = async (
  options?: RequestInit,
): Promise<getPackagesResponse> => {
  return customFetch<Promise<getPackagesResponse>>(getGetPackagesUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetPackagesQueryKey = () => {
  return [`/api/v1/packages`] as const;
};

export const getGetPackagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPackagesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPackages>>> = ({
    signal,
  }) => getPackages({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPackages>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPackagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPackages>>
>;
export type GetPackagesQueryError = unknown;

export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPackages>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPackages>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPackagesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type getPackagesIdParametersResponse = {
  data: Contract[];
  status: number;
};

export const getGetPackagesIdParametersUrl = (id: string) => {
  return `/api/v1/packages/${id}/parameters`;
};

export const getPackagesIdParameters = async (
  id: string,
  options?: RequestInit,
): Promise<getPackagesIdParametersResponse> => {
  return customFetch<Promise<getPackagesIdParametersResponse>>(
    getGetPackagesIdParametersUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetPackagesIdParametersQueryKey = (id: string) => {
  return [`/api/v1/packages/${id}/parameters`] as const;
};

export const getGetPackagesIdParametersQueryOptions = <
  TData = Awaited<ReturnType<typeof getPackagesIdParameters>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdParameters>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPackagesIdParametersQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPackagesIdParameters>>
  > = ({ signal }) =>
    getPackagesIdParameters(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPackagesIdParameters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPackagesIdParametersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPackagesIdParameters>>
>;
export type GetPackagesIdParametersQueryError = unknown;

export function useGetPackagesIdParameters<
  TData = Awaited<ReturnType<typeof getPackagesIdParameters>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdParameters>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackagesIdParameters>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPackagesIdParameters<
  TData = Awaited<ReturnType<typeof getPackagesIdParameters>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdParameters>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackagesIdParameters>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPackagesIdParameters<
  TData = Awaited<ReturnType<typeof getPackagesIdParameters>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdParameters>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPackagesIdParameters<
  TData = Awaited<ReturnType<typeof getPackagesIdParameters>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdParameters>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPackagesIdParametersQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type postPackagesIdResponse = {
  data: void;
  status: number;
};

export const getPostPackagesIdUrl = (id: string) => {
  return `/api/v1/packages/${id}`;
};

export const postPackagesId = async (
  id: string,
  options?: RequestInit,
): Promise<postPackagesIdResponse> => {
  return customFetch<Promise<postPackagesIdResponse>>(
    getPostPackagesIdUrl(id),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostPackagesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPackagesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPackagesId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPackagesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return postPackagesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPackagesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPackagesId>>
>;

export type PostPackagesIdMutationError = unknown;

export const usePostPackagesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPackagesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPackagesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPostPackagesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
