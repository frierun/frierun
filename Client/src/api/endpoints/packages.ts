/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Frierun.Server
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { GetPackagesIdPlan200Item, Package } from "../schemas";
import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export type getPackagesResponse = {
  data: Package[];
  status: number;
};

export const getGetPackagesUrl = () => {
  return `/api/v1/packages`;
};

export const getPackages = async (
  options?: RequestInit,
): Promise<getPackagesResponse> => {
  return customFetch<Promise<getPackagesResponse>>(getGetPackagesUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetPackagesQueryKey = () => {
  return [`/api/v1/packages`] as const;
};

export const getGetPackagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPackagesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPackages>>> = ({
    signal,
  }) => getPackages({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPackages>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPackagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPackages>>
>;
export type GetPackagesQueryError = unknown;

export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPackages>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPackages>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPackagesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type getPackagesIdPlanResponse = {
  data: GetPackagesIdPlan200Item[];
  status: number;
};

export const getGetPackagesIdPlanUrl = (id: string) => {
  return `/api/v1/packages/${id}/plan`;
};

export const getPackagesIdPlan = async (
  id: string,
  options?: RequestInit,
): Promise<getPackagesIdPlanResponse> => {
  return customFetch<Promise<getPackagesIdPlanResponse>>(
    getGetPackagesIdPlanUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetPackagesIdPlanQueryKey = (id: string) => {
  return [`/api/v1/packages/${id}/plan`] as const;
};

export const getGetPackagesIdPlanQueryOptions = <
  TData = Awaited<ReturnType<typeof getPackagesIdPlan>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdPlan>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPackagesIdPlanQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPackagesIdPlan>>
  > = ({ signal }) => getPackagesIdPlan(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPackagesIdPlan>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPackagesIdPlanQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPackagesIdPlan>>
>;
export type GetPackagesIdPlanQueryError = unknown;

export function useGetPackagesIdPlan<
  TData = Awaited<ReturnType<typeof getPackagesIdPlan>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdPlan>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackagesIdPlan>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPackagesIdPlan<
  TData = Awaited<ReturnType<typeof getPackagesIdPlan>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdPlan>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPackagesIdPlan>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPackagesIdPlan<
  TData = Awaited<ReturnType<typeof getPackagesIdPlan>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdPlan>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPackagesIdPlan<
  TData = Awaited<ReturnType<typeof getPackagesIdPlan>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPackagesIdPlan>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPackagesIdPlanQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type postPackagesIdInstallResponse = {
  data: void;
  status: number;
};

export const getPostPackagesIdInstallUrl = (id: string) => {
  return `/api/v1/packages/${id}/install`;
};

export const postPackagesIdInstall = async (
  id: string,
  _package: Package,
  options?: RequestInit,
): Promise<postPackagesIdInstallResponse> => {
  return customFetch<Promise<postPackagesIdInstallResponse>>(
    getPostPackagesIdInstallUrl(id),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(_package),
    },
  );
};

export const getPostPackagesIdInstallMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPackagesIdInstall>>,
    TError,
    { id: string; data: Package },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPackagesIdInstall>>,
  TError,
  { id: string; data: Package },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPackagesIdInstall>>,
    { id: string; data: Package }
  > = (props) => {
    const { id, data } = props ?? {};

    return postPackagesIdInstall(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPackagesIdInstallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPackagesIdInstall>>
>;
export type PostPackagesIdInstallMutationBody = Package;
export type PostPackagesIdInstallMutationError = unknown;

export const usePostPackagesIdInstall = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPackagesIdInstall>>,
    TError,
    { id: string; data: Package },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPackagesIdInstall>>,
  TError,
  { id: string; data: Package },
  TContext
> => {
  const mutationOptions = getPostPackagesIdInstallMutationOptions(options);

  return useMutation(mutationOptions);
};
