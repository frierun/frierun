/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Frierun.Server
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ExecutionPlan,
  HandlerExceptionResult,
  Package,
} from "../schemas";

import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getPackagesResponse200 = {
  data: Package[];
  status: 200;
};

export type getPackagesResponseComposite = getPackagesResponse200;

export type getPackagesResponse = getPackagesResponseComposite & {
  headers: Headers;
};

export const getGetPackagesUrl = () => {
  return `/api/v1/packages`;
};

export const getPackages = async (
  options?: RequestInit,
): Promise<getPackagesResponse> => {
  return customFetch<getPackagesResponse>(getGetPackagesUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetPackagesQueryKey = () => {
  return [`/api/v1/packages`] as const;
};

export const getGetPackagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPackagesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPackages>>> = ({
    signal,
  }) => getPackages({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPackages>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPackagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPackages>>
>;
export type GetPackagesQueryError = unknown;

export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPackages>>,
        TError,
        Awaited<ReturnType<typeof getPackages>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPackages>>,
        TError,
        Awaited<ReturnType<typeof getPackages>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetPackages<
  TData = Awaited<ReturnType<typeof getPackages>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPackages>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPackagesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type postPackagesIdPlanResponse200 = {
  data: ExecutionPlan;
  status: 200;
};

export type postPackagesIdPlanResponse404 = {
  data: void;
  status: 404;
};

export type postPackagesIdPlanResponse409 = {
  data: HandlerExceptionResult;
  status: 409;
};

export type postPackagesIdPlanResponseComposite =
  | postPackagesIdPlanResponse200
  | postPackagesIdPlanResponse404
  | postPackagesIdPlanResponse409;

export type postPackagesIdPlanResponse = postPackagesIdPlanResponseComposite & {
  headers: Headers;
};

export const getPostPackagesIdPlanUrl = (id: string) => {
  return `/api/v1/packages/${id}/plan`;
};

export const postPackagesIdPlan = async (
  id: string,
  _package: Package,
  options?: RequestInit,
): Promise<postPackagesIdPlanResponse> => {
  return customFetch<postPackagesIdPlanResponse>(getPostPackagesIdPlanUrl(id), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(_package),
  });
};

export const getPostPackagesIdPlanMutationOptions = <
  TError = void | HandlerExceptionResult,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPackagesIdPlan>>,
    TError,
    { id: string; data: Package },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPackagesIdPlan>>,
  TError,
  { id: string; data: Package },
  TContext
> => {
  const mutationKey = ["postPackagesIdPlan"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPackagesIdPlan>>,
    { id: string; data: Package }
  > = (props) => {
    const { id, data } = props ?? {};

    return postPackagesIdPlan(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPackagesIdPlanMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPackagesIdPlan>>
>;
export type PostPackagesIdPlanMutationBody = Package;
export type PostPackagesIdPlanMutationError = void | HandlerExceptionResult;

export const usePostPackagesIdPlan = <
  TError = void | HandlerExceptionResult,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPackagesIdPlan>>,
    TError,
    { id: string; data: Package },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPackagesIdPlan>>,
  TError,
  { id: string; data: Package },
  TContext
> => {
  const mutationOptions = getPostPackagesIdPlanMutationOptions(options);

  return useMutation(mutationOptions);
};
export type postPackagesIdInstallResponse202 = {
  data: void;
  status: 202;
};

export type postPackagesIdInstallResponse404 = {
  data: void;
  status: 404;
};

export type postPackagesIdInstallResponse409 = {
  data: HandlerExceptionResult;
  status: 409;
};

export type postPackagesIdInstallResponseComposite =
  | postPackagesIdInstallResponse202
  | postPackagesIdInstallResponse404
  | postPackagesIdInstallResponse409;

export type postPackagesIdInstallResponse =
  postPackagesIdInstallResponseComposite & {
    headers: Headers;
  };

export const getPostPackagesIdInstallUrl = (id: string) => {
  return `/api/v1/packages/${id}/install`;
};

export const postPackagesIdInstall = async (
  id: string,
  _package: Package,
  options?: RequestInit,
): Promise<postPackagesIdInstallResponse> => {
  return customFetch<postPackagesIdInstallResponse>(
    getPostPackagesIdInstallUrl(id),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(_package),
    },
  );
};

export const getPostPackagesIdInstallMutationOptions = <
  TError = void | HandlerExceptionResult,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPackagesIdInstall>>,
    TError,
    { id: string; data: Package },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPackagesIdInstall>>,
  TError,
  { id: string; data: Package },
  TContext
> => {
  const mutationKey = ["postPackagesIdInstall"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPackagesIdInstall>>,
    { id: string; data: Package }
  > = (props) => {
    const { id, data } = props ?? {};

    return postPackagesIdInstall(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPackagesIdInstallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPackagesIdInstall>>
>;
export type PostPackagesIdInstallMutationBody = Package;
export type PostPackagesIdInstallMutationError = void | HandlerExceptionResult;

export const usePostPackagesIdInstall = <
  TError = void | HandlerExceptionResult,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPackagesIdInstall>>,
    TError,
    { id: string; data: Package },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postPackagesIdInstall>>,
  TError,
  { id: string; data: Package },
  TContext
> => {
  const mutationOptions = getPostPackagesIdInstallMutationOptions(options);

  return useMutation(mutationOptions);
};
