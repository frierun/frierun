/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Frierun.Server
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { State } from "../schemas";

export type getStateResponse = {
  data: State;
  status: number;
};

export const getGetStateUrl = () => {
  return `/api/v1/state`;
};

export const getState = async (
  options?: RequestInit,
): Promise<getStateResponse> => {
  const res = await fetch(getGetStateUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetStateQueryKey = () => {
  return [`/api/v1/state`] as const;
};

export const getGetStateQueryOptions = <
  TData = Awaited<ReturnType<typeof getState>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStateQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getState>>> = ({
    signal,
  }) => getState({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getState>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getState>>
>;
export type GetStateQueryError = unknown;

export function useGetState<
  TData = Awaited<ReturnType<typeof getState>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getState>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetState<
  TData = Awaited<ReturnType<typeof getState>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getState>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetState<
  TData = Awaited<ReturnType<typeof getState>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetState<
  TData = Awaited<ReturnType<typeof getState>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getState>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetStateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
