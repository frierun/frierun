/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Frierun.Server
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { Application } from "../schemas";

export type getApplicationsResponse = {
  data: Application[];
  status: number;
};

export const getGetApplicationsUrl = () => {
  return `/api/v1/applications`;
};

export const getApplications = async (
  options?: RequestInit,
): Promise<getApplicationsResponse> => {
  const res = await fetch(getGetApplicationsUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetApplicationsQueryKey = () => {
  return [`/api/v1/applications`] as const;
};

export const getGetApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApplicationsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplications>>> = ({
    signal,
  }) => getApplications({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApplications>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApplicationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApplications>>
>;
export type GetApplicationsQueryError = unknown;

export function useGetApplications<
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApplications>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApplications<
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApplications>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApplications<
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApplications<
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApplicationsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type deleteApplicationsIdResponse = {
  data: void;
  status: number;
};

export const getDeleteApplicationsIdUrl = (id: string) => {
  return `/api/v1/applications/${id}`;
};

export const deleteApplicationsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteApplicationsIdResponse> => {
  const res = await fetch(getDeleteApplicationsIdUrl(id), {
    ...options,
    method: "DELETE",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getDeleteApplicationsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApplicationsId>>,
    TError,
    { id: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApplicationsId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApplicationsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApplicationsId(id, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApplicationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApplicationsId>>
>;

export type DeleteApplicationsIdMutationError = unknown;

export const useDeleteApplicationsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApplicationsId>>,
    TError,
    { id: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApplicationsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApplicationsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
