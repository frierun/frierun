/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Frierun.Server
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { ApplicationResponse, ProblemDetails } from "../schemas";

import { customFetch } from "../../custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getApplicationsResponse200 = {
  data: ApplicationResponse[];
  status: 200;
};

export type getApplicationsResponseComposite = getApplicationsResponse200;

export type getApplicationsResponse = getApplicationsResponseComposite & {
  headers: Headers;
};

export const getGetApplicationsUrl = () => {
  return `/api/v1/applications`;
};

export const getApplications = async (
  options?: RequestInit,
): Promise<getApplicationsResponse> => {
  return customFetch<getApplicationsResponse>(getGetApplicationsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetApplicationsQueryKey = () => {
  return [`/api/v1/applications`] as const;
};

export const getGetApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApplicationsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplications>>> = ({
    signal,
  }) => getApplications({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApplicationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApplications>>
>;
export type GetApplicationsQueryError = unknown;

export function useGetApplications<
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApplications>>,
        TError,
        Awaited<ReturnType<typeof getApplications>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApplications<
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApplications>>,
        TError,
        Awaited<ReturnType<typeof getApplications>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApplications<
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApplications<
  TData = Awaited<ReturnType<typeof getApplications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApplicationsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type deleteApplicationsNameResponse202 = {
  data: void;
  status: 202;
};

export type deleteApplicationsNameResponse404 = {
  data: ProblemDetails;
  status: 404;
};

export type deleteApplicationsNameResponseComposite =
  | deleteApplicationsNameResponse202
  | deleteApplicationsNameResponse404;

export type deleteApplicationsNameResponse =
  deleteApplicationsNameResponseComposite & {
    headers: Headers;
  };

export const getDeleteApplicationsNameUrl = (name: string) => {
  return `/api/v1/applications/${name}`;
};

export const deleteApplicationsName = async (
  name: string,
  options?: RequestInit,
): Promise<deleteApplicationsNameResponse> => {
  return customFetch<deleteApplicationsNameResponse>(
    getDeleteApplicationsNameUrl(name),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteApplicationsNameMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApplicationsName>>,
    TError,
    { name: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApplicationsName>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationKey = ["deleteApplicationsName"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApplicationsName>>,
    { name: string }
  > = (props) => {
    const { name } = props ?? {};

    return deleteApplicationsName(name, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApplicationsNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApplicationsName>>
>;

export type DeleteApplicationsNameMutationError = ProblemDetails;

export const useDeleteApplicationsName = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApplicationsName>>,
    TError,
    { name: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApplicationsName>>,
  TError,
  { name: string },
  TContext
> => {
  const mutationOptions = getDeleteApplicationsNameMutationOptions(options);

  return useMutation(mutationOptions);
};
